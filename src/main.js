import * as model from "./model.js";
import * as constants from "./constants.js";

/**
 * Interacts with the Model module, to create a new account. 
 * Returns the message generated by the Model 
 */
export async function createAccount(name) {
  return await model.createAccount(name);
}

/**
 * Interacts with the Model module, to create a new deposit transaction
 * for a given account number.
 * Returns the message generated by the Model.
 */
export async function deposit(account, amount) {
  if (confirmDepositAmount(amount)) {
    return await model.singleAccountTransaction(account, amount, "deposit");
  } 
  return constants.errorMessages.depositAmount + account;
}

/**
 * Interacts with the Model module, to create a new withdrawal transaction
 * for a given account number.
 * Returns the message generated by the Model.
 */
export async function withdraw(account, amount) {
  if (confirmWithdrawalAmount(amount)) {
    return await model.singleAccountTransaction(account, amount, "withdraw");
  } 
  return constants.errorMessages.withdrawAmount + account;
}

/**
 * Interacts with the Model module, to create a new transfer transaction
 * for a given account number.
 * Returns the message generated by the Model.
 */
export async function transfer(account1, account2, amount) {
  if (confirmDepositAmount(amount)) {
    if (confirmWithdrawalAmount(amount)) {
      return await model.transfer(account1, account2, amount);
    }
    return constants.errorMessages.withdrawAmount + account1;
    
  } 
  return constants.errorMessages.depositAmount + account2;
}

/**
 * Confirms whether a given amount is within the bounds of a deposit transaction
 */
function confirmDepositAmount(amount) {
  return amount >= constants.minDepositAmount && amount <= constants.maxDepositAmount;
}


/**
 * Confirms whether a given amount is within the bounds of a withdrawal transaction
 */
function confirmWithdrawalAmount(amount) {
  return amount >= constants.minWithdrawalAmount && amount <= constants.maxWithdrawalAmount;
}

